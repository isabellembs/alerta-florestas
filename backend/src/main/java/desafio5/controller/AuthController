package desafio5.controller;

import desafio5.model.entity.Usuario;
import desafio5.service.UsuarioService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

@RestController
@CrossOrigin(origins = {"http://localhost:3000"})
public class AuthController {

    @Autowired
    private UsuarioService usuarioService;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody Map<String, String> loginRequest) {
        try {
            String email = loginRequest.get("email");
            String senha = loginRequest.get("senha");

            // Verificar se usuário existe
            Optional<Usuario> usuarioOpt = usuarioService.buscarPorEmail(email);
            if (!usuarioOpt.isPresent()) {
                return ResponseEntity.badRequest()
                    .body(Map.of("message", "Email não encontrado"));
            }

            Usuario usuario = usuarioOpt.get();

            // Verificar senha (assumindo que você tem BCrypt)
            if (!passwordEncoder.matches(senha, usuario.getSenha())) {
                return ResponseEntity.badRequest()
                    .body(Map.of("message", "Senha incorreta"));
            }

            // Gerar token simples (você pode implementar JWT depois)
            String token = "Bearer-" + usuario.getId_usuario().toString();

            // Resposta de sucesso
            Map<String, Object> response = new HashMap<>();
            response.put("token", token);
            response.put("usuario", Map.of(
                "id_usuario", usuario.getId_usuario(),
                "nome", usuario.getNome(),
                "email", usuario.getEmail()
            ));

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(Map.of("message", "Erro interno: " + e.getMessage()));
        }
    }
}